{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\MLab\\\\Desktop\\\\React-Native\\\\X-Urgency\\\\x-urgency-application\\\\src\\\\Screens\\\\UploadVids.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Card } from 'react-native-paper';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Sharing from 'expo-sharing';\nimport uploadToAnonymousFilesAsync from 'anonymous-files';\nexport default function Upload() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedImage = _React$useState2[0],\n      setSelectedImage = _React$useState2[1];\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult, remoteUri;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert('Permission to access camera roll is required!');\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            if (!(Platform.OS === 'web')) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(uploadToAnonymousFilesAsync(pickerResult.uri));\n\n          case 14:\n            remoteUri = _context.sent;\n            setSelectedImage({\n              localUri: pickerResult.uri,\n              remoteUri: remoteUri\n            });\n            _context.next = 19;\n            break;\n\n          case 18:\n            setSelectedImage({\n              localUri: pickerResult.uri,\n              remoteUri: 'https://moon.jpg'\n            });\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openShareDialogAsync = function openShareDialogAsync() {\n    return _regeneratorRuntime.async(function openShareDialogAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Sharing.isAvailableAsync());\n\n          case 2:\n            if (_context2.sent) {\n              _context2.next = 5;\n              break;\n            }\n\n            alert(\"The image is available for sharing at: \" + selectedImage.remoteUri);\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            Sharing.shareAsync(selectedImage.remoteUri || selectedImage.localUri);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (selectedImage !== null) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: selectedImage.localUri\n      },\n      style: styles.thumbnail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }), React.createElement(TouchableOpacity, {\n      onPress: openShareDialogAsync,\n      style: styles.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.buttonText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, \"Share this photo\")));\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, React.createElement(Card, {\n    style: styles.txtCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: styles.txtUser,\n    name: \"username\",\n    placeholder: \"Upload Video\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }))), React.createElement(Text, {\n    style: styles.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"To share a photo from your phone with a friend, just press the button below!\"), React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync,\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Upload Video\")));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  txtUser: {\n    width: 320,\n    height: 150,\n    borderRadius: 10,\n    outline: 'none',\n    backgroundColor: 'lightgrey',\n    paddingLeft: 10\n  },\n  instructions: {\n    color: '#888',\n    fontSize: 18,\n    marginHorizontal: 15,\n    marginBottom: 10\n  },\n  button: {\n    backgroundColor: 'blue',\n    padding: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain'\n  }\n});","map":{"version":3,"sources":["C:/Users/MLab/Desktop/React-Native/X-Urgency/x-urgency-application/src/Screens/UploadVids.js"],"names":["React","Card","ImagePicker","Sharing","uploadToAnonymousFilesAsync","Upload","useState","selectedImage","setSelectedImage","openImagePickerAsync","requestCameraRollPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","Platform","OS","uri","remoteUri","localUri","openShareDialogAsync","isAvailableAsync","shareAsync","styles","container","thumbnail","button","buttonText","txtCards","flexDirection","txtUser","instructions","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height","borderRadius","outline","paddingLeft","color","fontSize","marginHorizontal","marginBottom","padding","resizeMode"],"mappings":"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","sourcesContent":["/**\r\n    * @description      : \r\n    * @author           : TLeeuw\r\n    * @group            : \r\n    * @created          : 20/10/2021 - 10:59:29\r\n    * \r\n    * MODIFICATION LOG\r\n    * - Version         : 1.0.0\r\n    * - Date            : 20/10/2021\r\n    * - Author          : TLeeuw\r\n    * - Modification    : \r\n**/\r\nimport React from 'react';\r\nimport { Image, Platform, StyleSheet, Text, TouchableOpacity, View, TextInput } from 'react-native';\r\nimport { Card } from 'react-native-paper'\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport * as Sharing from 'expo-sharing';\r\nimport uploadToAnonymousFilesAsync from 'anonymous-files';\r\nexport default function Upload() {\r\n  let [selectedImage, setSelectedImage] = React.useState(null);\r\n  let openImagePickerAsync = async () => {\r\n    let permissionResult = await ImagePicker.requestCameraRollPermissionsAsync();\r\n    if (permissionResult.granted === false) {\r\n      alert('Permission to access camera roll is required!');\r\n      return;\r\n    }\r\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\r\n    if (pickerResult.cancelled === true) {\r\n      return;\r\n    }\r\n    if (Platform.OS === 'web') {\r\n      let remoteUri = await uploadToAnonymousFilesAsync(pickerResult.uri);\r\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri });\r\n    } else {\r\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri: 'https://moon.jpg' });\r\n    }\r\n  };\r\n  let openShareDialogAsync = async () => {\r\n    if (!(await Sharing.isAvailableAsync())) {\r\n      alert(`The image is available for sharing at: ${selectedImage.remoteUri}`);\r\n      return;\r\n    }\r\n    Sharing.shareAsync(selectedImage.remoteUri || selectedImage.localUri);\r\n  };\r\n  if (selectedImage !== null) {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Image source={{ uri: selectedImage.localUri }} style={styles.thumbnail} />\r\n        <TouchableOpacity onPress={openShareDialogAsync} style={styles.button}>\r\n          <Text style={styles.buttonText}>Share this photo</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n  return (\r\n    <View style={styles.container}>\r\n      <Card style={styles.txtCards}>\r\n        <View style={{ flexDirection: 'row' }}>\r\n          <TextInput style={styles.txtUser}\r\n            name='username' placeholder='Upload Video'\r\n          />\r\n        </View>\r\n      </Card>\r\n      <Text style={styles.instructions}>\r\n        To share a photo from your phone with a friend, just press the button below!\r\n      </Text>\r\n      <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>\r\n        <Text style={styles.buttonText}>Upload Video</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  txtUser: {\r\n    width: 320,\r\n    height: 150,\r\n    borderRadius: 10,\r\n    outline: 'none',\r\n    backgroundColor: 'lightgrey',\r\n    paddingLeft: 10,\r\n  },\r\n  instructions: {\r\n    color: '#888',\r\n    fontSize: 18,\r\n    marginHorizontal: 15,\r\n    marginBottom: 10,\r\n  },\r\n  button: {\r\n    backgroundColor: 'blue',\r\n    padding: 20,\r\n    borderRadius: 5,\r\n  },\r\n  buttonText: {\r\n    fontSize: 20,\r\n    color: '#fff',\r\n  },\r\n  thumbnail: {\r\n    width: 300,\r\n    height: 300,\r\n    resizeMode: 'contain',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}