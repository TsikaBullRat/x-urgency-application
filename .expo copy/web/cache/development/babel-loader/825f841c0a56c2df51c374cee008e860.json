{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\MLab\\\\Desktop\\\\React-Native\\\\X-Urgency\\\\x-urgency-application\\\\src\\\\Screens\\\\UploadVideo.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Sharing from 'expo-sharing';\nexport default function App() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedImage = _React$useState2[0],\n      setSelectedImage = _React$useState2[1];\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert('Permission to access camera roll is required!');\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            setSelectedImage({\n              localUri: pickerResult.uri\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openShareDialogAsync = function openShareDialogAsync() {\n    return _regeneratorRuntime.async(function openShareDialogAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Sharing.isAvailableAsync());\n\n          case 2:\n            if (_context2.sent) {\n              _context2.next = 5;\n              break;\n            }\n\n            alert(\"Uh oh, sharing isn't available on your platform\");\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(Sharing.shareAsync(selectedImage.localUri));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (selectedImage !== null) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: selectedImage.localUri\n      },\n      style: styles.thumbnail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }), React.createElement(TouchableOpacity, {\n      onPress: openShareDialogAsync,\n      style: styles.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.buttonText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, \"Share this video\")));\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"To share a video from your phone/PC , just press the button below!\"), React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync,\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Pick a video\")));\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  logo: {\n    width: 305,\n    height: 159,\n    marginTop: 450\n  },\n  instructions: {\n    color: '#888',\n    fontSize: 18,\n    marginHorizontal: 15\n  },\n  button: {\n    backgroundColor: 'blue',\n    padding: 20,\n    borderRadius: 5,\n    marginTop: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain'\n  }\n});","map":{"version":3,"sources":["C:/Users/MLab/Desktop/React-Native/X-Urgency/x-urgency-application/src/Screens/UploadVideo.js"],"names":["React","ImagePicker","Sharing","App","useState","selectedImage","setSelectedImage","openImagePickerAsync","requestCameraRollPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","localUri","uri","openShareDialogAsync","isAvailableAsync","shareAsync","styles","container","thumbnail","button","buttonText","instructions","StyleSheet","create","backgroundColor","alignItems","justifyContent","logo","width","height","marginTop","color","fontSize","marginHorizontal","padding","borderRadius","resizeMode"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,wBAAwCH,KAAK,CAACI,QAAN,CAAe,IAAf,CAAxC;AAAA;AAAA,MAAKC,aAAL;AAAA,MAAoBC,gBAApB;;AAEA,MAAIC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACIN,WAAW,CAACO,iCAAZ,EADJ;;AAAA;AACrBC,YAAAA,gBADqB;;AAAA,kBAGrBA,gBAAgB,CAACC,OAAjB,KAA6B,KAHR;AAAA;AAAA;AAAA;;AAIvBC,YAAAA,KAAK,CAAC,+CAAD,CAAL;AAJuB;;AAAA;AAAA;AAAA,6CAQAV,WAAW,CAACW,uBAAZ,EARA;;AAAA;AAQrBC,YAAAA,YARqB;;AAAA,kBASrBA,YAAY,CAACC,SAAb,KAA2B,IATN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAazBR,YAAAA,gBAAgB,CAAC;AAAES,cAAAA,QAAQ,EAAEF,YAAY,CAACG;AAAzB,aAAD,CAAhB;;AAbyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAgBA,MAAIC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACbf,OAAO,CAACgB,gBAAR,EADa;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEvBP,YAAAA,KAAK,mDAAL;AAFuB;;AAAA;AAAA;AAAA,6CAMnBT,OAAO,CAACiB,UAAR,CAAmBd,aAAa,CAACU,QAAjC,CANmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AASA,MAAIV,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEe,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAE;AAAEL,QAAAA,GAAG,EAAEX,aAAa,CAACU;AAArB,OAAf;AAAgD,MAAA,KAAK,EAAEK,MAAM,CAACE,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,gBAAD;AAAkB,MAAA,OAAO,EAAEL,oBAA3B;AAAiD,MAAA,KAAK,EAAEG,MAAM,CAACG,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEH,MAAM,CAACI,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CAFF,CADF;AAQD;;AAED,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACK,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EAFF,EAME,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAElB,oBAA3B;AAAiD,IAAA,KAAK,EAAEa,MAAM,CAACG,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,MAAM,CAACI,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CANF,CADF;AAYD;AAED,IAAMJ,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAChCN,EAAAA,SAAS,EAAE;AAERO,IAAAA,eAAe,EAAE,MAFT;AAGRC,IAAAA,UAAU,EAAE,QAHJ;AAIRC,IAAAA,cAAc,EAAE;AAJR,GADqB;AAO/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,GADH;AAEJC,IAAAA,MAAM,EAAE,GAFJ;AAGJC,IAAAA,SAAS,EAAE;AAHP,GAPyB;AAY/BT,EAAAA,YAAY,EAAE;AACZU,IAAAA,KAAK,EAAE,MADK;AAEZC,IAAAA,QAAQ,EAAE,EAFE;AAGZC,IAAAA,gBAAgB,EAAE;AAHN,GAZiB;AAiB/Bd,EAAAA,MAAM,EAAE;AACNK,IAAAA,eAAe,EAAE,MADX;AAENU,IAAAA,OAAO,EAAE,EAFH;AAGNC,IAAAA,YAAY,EAAE,CAHR;AAINL,IAAAA,SAAS,EAAE;AAJL,GAjBuB;AAuB/BV,EAAAA,UAAU,EAAE;AACVY,IAAAA,QAAQ,EAAE,EADA;AAEVD,IAAAA,KAAK,EAAE;AAFG,GAvBmB;AA2B/Bb,EAAAA,SAAS,EAAE;AACTU,IAAAA,KAAK,EAAE,GADE;AAETC,IAAAA,MAAM,EAAE,GAFC;AAGTO,IAAAA,UAAU,EAAE;AAHH;AA3BoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport { Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport * as Sharing from 'expo-sharing';\r\n\r\nexport default function App() {\r\n  let [selectedImage, setSelectedImage] = React.useState(null);\r\n\r\n  let openImagePickerAsync = async () => {\r\n    let permissionResult = await ImagePicker.requestCameraRollPermissionsAsync();\r\n\r\n    if (permissionResult.granted === false) {\r\n      alert('Permission to access camera roll is required!');\r\n      return;\r\n    }\r\n\r\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\r\n    if (pickerResult.cancelled === true) {\r\n      return;\r\n    }\r\n\r\n    setSelectedImage({ localUri: pickerResult.uri }); \r\n  };\r\n\r\n  let openShareDialogAsync = async () => {\r\n    if (!(await Sharing.isAvailableAsync())) {\r\n      alert(`Uh oh, sharing isn't available on your platform`);\r\n      return;\r\n    }\r\n\r\n    await Sharing.shareAsync(selectedImage.localUri);\r\n  };\r\n\r\n  if (selectedImage !== null) {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Image source={{ uri: selectedImage.localUri }} style={styles.thumbnail} />\r\n        <TouchableOpacity onPress={openShareDialogAsync} style={styles.button}>\r\n          <Text style={styles.buttonText}>Share this video</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n \r\n  return (\r\n    <View style={styles.container}>\r\n      \r\n      <Text style={styles.instructions}>\r\n        To share a video from your phone/PC , just press the button below!\r\n      </Text>\r\n\r\n      <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>\r\n        <Text style={styles.buttonText}>Pick a video</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n container: {\r\n \r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  logo: {\r\n    width: 305,\r\n    height: 159,\r\n    marginTop: 450,\r\n  },\r\n  instructions: {\r\n    color: '#888',\r\n    fontSize: 18,\r\n    marginHorizontal: 15,\r\n  },\r\n  button: {\r\n    backgroundColor: 'blue',\r\n    padding: 20,\r\n    borderRadius: 5,\r\n    marginTop: 20\r\n  },\r\n  buttonText: {\r\n    fontSize: 20,\r\n    color: '#fff',\r\n  },\r\n  thumbnail: {\r\n    width: 300,\r\n    height: 300,\r\n    resizeMode: 'contain',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}